/***
 ***   This file is generated by JAIG at 00:49 05.03.2024
 ***   As a result of parsing GPT response
 ***   04_swagger_description-response
 ***/
package com.github.valentina810.foodforeveryone.controller.dish;

import com.github.valentina810.foodforeveryone.domain.dish.DishInOrder;
import com.github.valentina810.foodforeveryone.dto.DishInOrderAddDto;
import com.github.valentina810.foodforeveryone.service.dish.DishInOrderService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/dishInOrders")
@RequiredArgsConstructor
@Validated
public class DishInOrderController {

    private final DishInOrderService dishInOrderService;

    @Operation(summary = "Добавить блюдо в заказ")
    @ApiResponse(responseCode = "200", description = "Блюдо успешно добавлено в заказ")
    @PostMapping
    public DishInOrder addDishToOrder(@Valid @RequestBody DishInOrderAddDto dishInOrderAddDto) {
        return dishInOrderService.addDishToOrder(dishInOrderAddDto);
    }

    @Operation(summary = "Обновление блюда в заказе")
    @ApiResponse(responseCode = "200", description = "Обновление успешно")
    @PatchMapping("/{id}")
    public DishInOrder updateDishToOrder(@PathVariable("id") Long id, @Positive @RequestParam("count") Integer count) {
        return dishInOrderService.updateDishToOrder(id, count);
    }

    @Operation(summary = "Удалить блюдо из заказа")
    @ApiResponse(responseCode = "200", description = "Блюдо успешно удалено из заказа")
    @DeleteMapping("/{id}")
    public void removeDishFromOrder(@PathVariable("id") Long id) {
        dishInOrderService.removeDishFromOrder(id);
    }

    @Operation(summary = "Удалить все блюда из заказа")
    @ApiResponse(responseCode = "200", description = "Все блюда успешно удалены из заказа")
    @GetMapping("/search/{orderId}")
    public List<DishInOrder> getDishesByOrderId(@PathVariable("orderId") Long orderId) {
        return dishInOrderService.getDishesByOrderId(orderId);
    }
}
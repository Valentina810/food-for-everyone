/***
 ***   This file is generated by JAIG at 01:07 05.03.2024
 ***   As a result of parsing GPT response
 ***   04_swagger_description-response
 ***/
package com.github.valentina810.foodforeveryone.controller.user;

import com.github.valentina810.foodforeveryone.domain.user.User;
import com.github.valentina810.foodforeveryone.dto.UserCreateDto;
import com.github.valentina810.foodforeveryone.service.user.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @Operation(summary = "Создание пользователя")
    @ApiResponse(responseCode = "200", description = "Пользователь успешно создан")
    @PostMapping
    public ResponseEntity<User> addUser(@RequestBody UserCreateDto userCreateDto) {
        User newUser = userService.addUser(userCreateDto);
        return new ResponseEntity<>(newUser, HttpStatus.CREATED);
    }

    @Operation(summary = "Получение пользователя по id")
    @ApiResponse(responseCode = "200", description = "Пользователь найден")
    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }

    @Operation(summary = "Поиск пользователя по email")
    @ApiResponse(responseCode = "200", description = "Пользователь найден")
    @GetMapping("/search")
    public ResponseEntity<User> getUserByEmail(@RequestParam String email) {
        User user = userService.getUserByEmail(email);
        return new ResponseEntity<>(user, HttpStatus.OK);
    }

    @Operation(summary = "Обновление пользователя по id")
    @ApiResponse(responseCode = "200", description = "Пользователь успешно обновлен")
    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @Valid @RequestBody UserCreateDto userCreateDto) {
        User updatedUser = userService.updateUser(id, userCreateDto);
        return new ResponseEntity<>(updatedUser, HttpStatus.OK);
    }

    @Operation(summary = "Удаление пользователя по id")
    @ApiResponse(responseCode = "200", description = "Пользователь успешно удален")
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    @Operation(summary = "Блокировка пользователя по id")
    @ApiResponse(responseCode = "200", description = "Данные добавлены")
    @PutMapping("/{id}/block")
    public ResponseEntity<User> blockUser(@PathVariable Long id, @RequestParam @Positive Long idReasonBlocked) {
        User blockedUser = userService.blockUser(id, idReasonBlocked);
        return new ResponseEntity<>(blockedUser, HttpStatus.OK);
    }
}
/***
 ***   This file is generated by JAIG at 21:12 03.03.2024
 ***   As a result of parsing GPT response
 ***   controller-response
 ***/
package com.github.valentina810.foodforeveryone.services.dish;

import com.github.valentina810.foodforeveryone.domain.dish.Dish;
import com.github.valentina810.foodforeveryone.domain.dish.DishInOrder;
import com.github.valentina810.foodforeveryone.domain.order.Order;
import com.github.valentina810.foodforeveryone.dto.DishInOrderAddDto;
import com.github.valentina810.foodforeveryone.repository.dish.DishInOrderRepository;
import com.github.valentina810.foodforeveryone.repository.dish.DishRepository;
import com.github.valentina810.foodforeveryone.repository.order.OrderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
public class DishInOrderServiceImpl implements DishInOrderService {

    private final DishInOrderRepository dishInOrderRepository;
    private final DishRepository dishRepository;
    private final OrderRepository orderRepository;

    @Override
    public DishInOrder addDishToOrder(DishInOrderAddDto dishInOrderAddDto) {
        Dish dish = findEntityById(dishRepository, dishInOrderAddDto.getDishId(), "Блюдо");
        Order order = findEntityById(orderRepository, dishInOrderAddDto.getOrderId(), "Заказ");
        return dishInOrderRepository.save(DishInOrder.builder()
                .dish(dish)
                .orders(order)
                .count(dishInOrderAddDto.getCount())
                .build());
    }

    private <T> T findEntityById(JpaRepository<T, Long> repository, Long id, String entityName) {
        return repository.findById(id).orElseThrow(() -> new RuntimeException(String.format("%s с id %d не найден!", entityName, id)));
    }

    @Override
    public void removeDishFromOrder(Long id) {
        dishInOrderRepository.deleteById(id);
    }

    @Override
    public List<DishInOrder> getDishesByOrderId(Long orderId) {
        return dishInOrderRepository.findByOrderId(orderId);
    }
}